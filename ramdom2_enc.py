#__________________| INFO |___________________#
#______SCRIPT ENCRYPTED BY PYTHON 3.0
#______CODING BY: U7P4L 1N
#______GITHUB : https://github.com/U7P4L-IN
#________________| SCRIPT DATA |_____________#

import base64
exec(base64.b64decode(b''))